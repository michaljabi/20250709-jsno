/**
 * 2.1
 *
 * ZrÃ³b funkcjÄ™ "divide", ktÃ³ra dzieli 2 liczby,
 * ale przesyÅ‚a do nas wynik, po 3 sekundach.
 * funkcja ta nie powinna w sobie zawieraÄ‡ sÅ‚owa kluczowego "return".
 * Ma odliczyÄ‡ 3 sekundy i "wysÅ‚aÄ‡" wynik.
 *
 * PokaÅ¼ uÅ¼ycie funkcji divide â€” udowodnij, Å¼e dziaÅ‚a poprawnie
 * */


function divideAync(a = 0, b = 1, collect = () => {}) {
 
    setTimeout(() => {

        if(b === 0) {
            return collect(new Error("Cannot divide by 0"), null)
        }

        collect(null, a / b)
    }, 3000)
}



divideAync(10, 2, (err, result) => {
    if(!err) {
        console.log(result)
    }
})

/**
 * 2.2
 *
 * Jak teraz moÅ¼emy obsÅ‚uÅ¼yÄ‡ bÅ‚Ä…d "Cannot divide by 0"?
 * - zaproponuj rozwiÄ…zanie
 * 
 * 
 * bo hmmmm try catch nie zadziaÅ‚a ?
 * */

// innymi sÅ‚owy "jak poinformowaÄ‡ Consumera, Å¼e coÅ› poszÅ‚o nie tak."

// To nie zadziaÅ‚a, bo `throw` wewnÄ…trz setTimeout bÄ™dzie poza naszym `try/catch` ðŸ˜¢
try {
    divideAync(10, 0, (err, result) => {
        console.log(result)
    })
} catch (e) {
    console.log(e.message)
}

// poprawnie obsÅ‚ugujemy bÅ‚Ä…d :
divideAync(10, 0, (err, result) => {
    if(err) {
        return console.log(err.message);
    }
    console.log(result)
})