/**
 * Promises mo≈ºna zapisaƒá du≈ºo pro≈õciej i czytelniej
 *
 * wykorzystujƒÖc sk≈Çadnie async / await
 *
 *
 * Najpierw sp√≥jrzmy jak ten zapis bƒôdzie wyglƒÖda≈Ç na poziomie CONSUMER'√≥w:
 * przyk≈Çad z PROVIDEREM bƒôdzie jeszcze ni≈ºej
 * */


// PROVIDER
function giveMePromise(password) {
	const someData = { userName: 'admin' };
	return new Promise((resolve, reject) => {
		if(password === 's3cr3t k3y') {
			resolve(someData);
		} else {
			reject(new Error('Nieprawid≈Çowe has≈Ço'))
		}
	})
}

// Potrzebujemy s≈Çowa kluczowego "async" aby w ≈õrodku funkcji m√≥c u≈ºywaƒá await !!
// Dlatego opakowujemy nasz kod w dodatkowƒÖ funkcjƒô (PS. mo≈ºna by tutaj u≈ºyƒá IIFE)
async function runMyCodeAsync() {

	// Zapis bƒôdzie teraz identyczny jak pisanie synchronicznego kodu.
	// CONSUMER(s):
	const data = await giveMePromise( 's3cr3t k3y' );
	console.log( 'Otrzyma≈Çem dane', data )

	try {
		const data = await giveMePromise( 'wrong' );
		console.log( 'Otrzyma≈Çem dane', data )
	} catch (err) {
		console.log('[!!!] Jest b≈ÇƒÖd:', err.message)
	}
}
runMyCodeAsync();

// Uproszczony zapis PROVIDERA:
// przypiƒôcie s≈Çowa "async" do funkcji sprawia i≈º ZAWSZE - bƒôdzie ona zwraca≈Ça Promise
// dlatego potem wystarczy nam tylko "return" lub "throw"
async function giveMePromiseAsyncVersion(password) {
	const someData = { userName: 'admin' };
	if(password === 's3cr3t k3y') {
		return someData;
	}
	throw new Error('Nieprawid≈Çowe has≈Ço');
}


// Kod z zadania b404 napisane w stylu async/await
async function codeFromTaskB404() {

	async function makeAjaxCallAsPromise(url) {
		// Albo:
		return 'resolved';
		// Albo:
		// throw new Error('reject');
	}

	try {
		const data1 = await makeAjaxCallAsPromise('https://first');
		const data2 = await makeAjaxCallAsPromise('https://second' + data1.url);
		const data3 = await makeAjaxCallAsPromise('https://third' + data2.url);
		console.log('THIS IS COOLNESS !!!', data3);
	} catch (err) {
		console.log('error üòê', err);
	}
}
